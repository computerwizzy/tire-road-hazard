-- Create policies table
create table if not exists
  public.policies (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    "policyNumber" character varying not null,
    "customerName" character varying null,
    "customerEmail" character varying null,
    "customerPhone" character varying null,
    "tireDot" character varying null,
    "purchaseDate" date null,
    "warrantyEndDate" date null,
    "receiptUrl" character varying null,
    "policyDocument" text null,
    "invoiceNumber" character varying null,
    "customerStreet" character varying null,
    "customerCity" character varying null,
    "customerState" character varying null,
    "customerZip" character varying null,
    "vehicleYear" real null,
    "vehicleMake" character varying null,
    "vehicleModel" character varying null,
    "vehicleSubmodel" character varying null,
    "vehicleMileage" real null,
    "isCommercial" boolean null,
    "tireBrand" character varying null,
    "tireModel" character varying null,
    "tireSize" character varying null,
    "tireQuantity" real null,
    "pricePerTire" real null,
    "roadHazardPrice" real null,
    "tireDot1" character varying null,
    "tireDot2" character varying null,
    "tireDot3" character varying null,
    "tireDot4" character varying null,
    "tireDot5" character varying null,
    "tireDot6" character varying null,
    "dealerName" character varying null,
    constraint policies_pkey primary key (id),
    constraint policies_policyNumber_key unique ("policyNumber")
  ) tablespace pg_default;

-- Create users table
create table if not exists
  public.users (
    id bigint generated by default as identity,
    email character varying not null,
    role character varying not null,
    created_at timestamp with time zone not null default now(),
    constraint users_pkey primary key (id),
    constraint users_email_key unique (email)
  ) tablespace pg_default;

-- Create storage bucket for receipts if it doesn't exist
insert into storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
values ('receipts', 'receipts', true, 5242880, Array['image/png', 'image/jpeg', 'image/webp', 'application/pdf'])
on conflict (id) do nothing;

-- Set up Row Level Security
alter table public.policies enable row level security;
alter table public.users enable row level security;

-- Drop existing policies to avoid conflicts
drop policy if exists "Allow public read access" on storage.objects;
drop policy if exists "Allow authenticated users to upload" on storage.objects;
drop policy if exists "Allow all access for authenticated users" on public.users;
drop policy if exists "Allow public read access" on public.policies;

-- Storage policies
create policy "Allow public read access"
on storage.objects for select
to public
using (bucket_id = 'receipts');

create policy "Allow authenticated users to upload"
on storage.objects for insert
to authenticated
with check (bucket_id = 'receipts');

-- Table policies
create policy "Allow all access for authenticated users" on public.users
for all
to authenticated
using (true)
with check (true);

create policy "Allow public read access" on public.policies
for select
to public
using (true);
