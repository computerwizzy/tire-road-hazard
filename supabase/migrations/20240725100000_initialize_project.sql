
-- Drop existing tables if they exist to start fresh
DROP TABLE IF EXISTS public.users CASCADE;
DROP TABLE IF EXISTS public.policies CASCADE;

-- Create users table
CREATE TABLE public.users (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email text UNIQUE,
    role text,
    created_at timestamp with time zone DEFAULT now()
);

-- Create policies table
CREATE TABLE public.policies (
    "policyNumber" text NOT NULL PRIMARY KEY,
    "invoiceNumber" text,
    "customerName" text,
    "customerEmail" text,
    "customerPhone" text,
    "customerStreet" text,
    "customerCity" text,
    "customerState" text,
    "customerZip" text,
    "vehicleYear" real,
    "vehicleMake" text,
    "vehicleModel" text,
    "vehicleSubmodel" text,
    "vehicleMileage" real,
    "isCommercial" boolean,
    "tireBrand" text,
    "tireModel" text,
    "tireSize" text,
    "tireQuantity" real,
    "pricePerTire" real,
    "roadHazardPrice" real,
    "tireDot1" text,
    "tireDot2" text,
    "tireDot3" text,
    "tireDot4" text,
    "tireDot5" text,
    "tireDot6" text,
    "purchaseDate" timestamp without time zone,
    "dealerName" text,
    "warrantyEndDate" text,
    "receiptUrl" text,
    "policyDocument" text,
    "tireDot" text
);

-- Enable Row Level Security
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.policies ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for users
DROP POLICY IF EXISTS "Allow authenticated users to read users" ON public.users;
CREATE POLICY "Allow authenticated users to read users" ON public.users FOR SELECT USING (auth.role() = 'authenticated');

DROP POLICY IF EXISTS "Allow admin users to insert users" ON public.users;
CREATE POLICY "Allow admin users to insert users" ON public.users FOR INSERT WITH CHECK (auth.role() = 'authenticated');

DROP POLICY IF EXISTS "Allow admin users to delete users" ON public.users;
CREATE POLICY "Allow admin users to delete users" ON public.users FOR DELETE USING (auth.role() = 'authenticated');


-- Create RLS policies for policies table
DROP POLICY IF EXISTS "Allow all users to read policies" ON public.policies;
CREATE POLICY "Allow all users to read policies" ON public.policies FOR SELECT USING (true);

DROP POLICY IF EXISTS "Allow authenticated users to create policies" ON public.policies;
CREATE POLICY "Allow authenticated users to create policies" ON public.policies FOR INSERT WITH CHECK (auth.role() = 'authenticated');


-- Create Storage Bucket for Receipts
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES ('receipts', 'receipts', true, 5242880, ARRAY['image/jpeg', 'image/png', 'application/pdf'])
ON CONFLICT (id) DO NOTHING;


-- Create Storage Policies for receipts bucket
-- Allow public read access
DROP POLICY IF EXISTS "Allow public read access on receipts" ON storage.objects;
CREATE POLICY "Allow public read access on receipts"
ON storage.objects FOR SELECT
TO public
USING ( bucket_id = 'receipts' );

-- Allow authenticated users to upload
DROP POLICY IF EXISTS "Allow authenticated users to upload to receipts" ON storage.objects;
CREATE POLICY "Allow authenticated users to upload to receipts"
ON storage.objects FOR INSERT
TO authenticated
WITH CHECK ( bucket_id = 'receipts' );
