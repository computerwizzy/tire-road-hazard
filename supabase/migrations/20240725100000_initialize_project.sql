--
-- Create the 'policies' table
--
CREATE TABLE IF NOT EXISTS public.policies (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    "policyNumber" text NOT NULL,
    "customerName" text NOT NULL,
    "customerEmail" text NOT NULL,
    "tireDot" text,
    "purchaseDate" date NOT NULL,
    "warrantyEndDate" date NOT NULL,
    "receiptUrl" text,
    "policyDocument" text,
    "customerPhone" text,
    "vehicleYear" real,
    "vehicleMake" text,
    "vehicleModel" text,
    "vehicleMileage" real,
    "dealerName" text,
    "invoiceNumber" text,
    "roadHazardPrice" real,
    "pricePerTire" real,
    "tireQuantity" real,
    "tireDot1" text,
    "tireDot2" text,
    "tireDot3" text,
    "tireDot4" text,
    "tireDot5" text,
    "tireDot6" text,
    "customerStreet" text,
    "customerCity" text,
    "customerState" text,
    "customerZip" text,
    "vehicleSubmodel" text,
    "isCommercial" boolean,
    "tireBrand" text,
    "tireModel" text,
    "tireSize" text
);

ALTER TABLE public.policies ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.policies_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY public.policies
    ADD CONSTRAINT policies_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.policies
    ADD CONSTRAINT "policies_policyNumber_key" UNIQUE ("policyNumber");

--
-- Create the 'users' table
--
CREATE TABLE IF NOT EXISTS public.users (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    email text NOT NULL,
    role text DEFAULT 'member'::text NOT NULL
);

ALTER TABLE public.users ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_email_key UNIQUE (email);

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Set up Row Level Security (RLS)
--
ALTER TABLE public.policies ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow public read-only access" ON public.policies FOR SELECT USING (true);
CREATE POLICY "Allow admin full access" ON public.users FOR ALL USING (auth.uid() IS NOT NULL);


--
-- Set up Storage Bucket and Policies
--

-- Create the 'receipts' bucket if it doesn't exist
INSERT INTO storage.buckets (id, name, public)
VALUES ('receipts', 'receipts', true)
ON CONFLICT (id) DO NOTHING;

-- Create policy to allow authenticated users to upload to the 'receipts' bucket
CREATE POLICY "Allow authenticated uploads"
ON storage.objects FOR INSERT
TO authenticated
WITH CHECK (bucket_id = 'receipts');

-- Create policy to allow public read access to the 'receipts' bucket
CREATE POLICY "Allow public read access"
ON storage.objects FOR SELECT
USING (bucket_id = 'receipts');
