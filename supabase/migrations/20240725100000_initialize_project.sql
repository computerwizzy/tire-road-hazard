
-- Create the users table to store admin panel users
create table if not exists users (
  id bigint generated by default as identity primary key,
  email text not null unique,
  role text not null default 'member',
  created_at timestamptz default now()
);

-- Create the policies table to store warranty information
create table if not exists policies (
    id bigint generated by default as identity primary key,
    "policyNumber" text not null unique,
    "customerName" text,
    "customerEmail" text,
    "customerPhone" text,
    "customerStreet" text,
    "customerCity" text,
    "customerState" text,
    "customerZip" text,
    "vehicleYear" integer,
    "vehicleMake" text,
    "vehicleModel" text,
    "vehicleSubmodel" text,
    "vehicleMileage" integer,
    "isCommercial" boolean,
    "tireBrand" text,
    "tireModel" text,
    "tireSize" text,
    "tireQuantity" integer,
    "pricePerTire" numeric,
    "roadHazardPrice" numeric,
    "tireDot" text,
    "tireDot1" text,
    "tireDot2" text,
    "tireDot3" text,
    "tireDot4" text,
    "tireDot5" text,
    "tireDot6" text,
    "purchaseDate" date,
    "dealerName" text,
    "invoiceNumber" text,
    "warrantyEndDate" date,
    "receiptUrl" text,
    "policyDocument" text,
    created_at timestamptz default now()
);

-- Set up Row Level Security (RLS)
alter table users enable row level security;
alter table policies enable row level security;

-- Policies for 'users' table
drop policy if exists "Allow admins to manage users" on users;
create policy "Allow admins to manage users" on users
  for all
  using (auth.uid() is not null and (select role from users where email = auth.email()) = 'admin');

drop policy if exists "Allow users to view their own data" on users;
create policy "Allow users to view their own data" on users
  for select
  using (auth.email() = email);

-- Policies for 'policies' table
drop policy if exists "Allow public read access to policies" on policies;
create policy "Allow public read access to policies" on policies
  for select
  using (true);

drop policy if exists "Allow authenticated users to manage policies" on policies;
create policy "Allow authenticated users to manage policies" on policies
  for all
  using (auth.uid() is not null)
  with check (auth.uid() is not null);


-- Create a bucket for receipts if it doesn't exist.
insert into storage.buckets (id, name, public)
values ('receipts', 'receipts', true)
on conflict (id) do nothing;

-- Storage policies for 'receipts' bucket
drop policy if exists "Allow authenticated users to upload receipts" on storage.objects;
create policy "Allow authenticated users to upload receipts" on storage.objects
  for insert
  to authenticated
  with check (bucket_id = 'receipts');

drop policy if exists "Allow public read access to receipts" on storage.objects;
create policy "Allow public read access to receipts" on storage.objects
  for select
  using (bucket_id = 'receipts');
