-- Create the users table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.users (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    email character varying,
    role character varying,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Create the policies table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.policies (
    "policyNumber" character varying NOT NULL,
    "customerName" character varying,
    "customerEmail" character varying,
    "tireDot" character varying,
    "purchaseDate" date,
    "warrantyEndDate" date,
    "receiptUrl" text,
    "policyDocument" text,
    "customerPhone" character varying,
    "vehicleYear" numeric,
    "vehicleMake" character varying,
    "vehicleModel" character varying,
    "vehicleMileage" numeric,
    "dealerName" character varying,
    "invoiceNumber" character varying,
    "roadHazardPrice" numeric,
    "pricePerTire" numeric,
    "tireQuantity" numeric,
    "tireDot1" character varying,
    "tireDot2" character varying,
    "tireDot3" character varying,
    "tireDot4" character varying,
    "tireDot5" character varying,
    "tireDot6" character varying,
    "customerStreet" character varying,
    "customerCity" character varying,
    "customerState" character varying,
    "customerZip" character varying,
    "vehicleSubmodel" character varying,
    "isCommercial" boolean,
    "tireBrand" character varying,
    "tireModel" character varying,
    "tireSize" character varying
);


-- Drop existing primary key constraints if they exist, then add them
DO $$
BEGIN
   IF EXISTS (
       SELECT 1 FROM pg_constraint
       WHERE conname = 'users_pkey' AND conrelid = 'public.users'::regclass
   ) THEN
       ALTER TABLE public.users DROP CONSTRAINT users_pkey;
   END IF;
END;
$$;
ALTER TABLE ONLY public.users ADD CONSTRAINT users_pkey PRIMARY KEY (id);

DO $$
BEGIN
   IF EXISTS (
       SELECT 1 FROM pg_constraint
       WHERE conname = 'policies_pkey' AND conrelid = 'public.policies'::regclass
   ) THEN
       ALTER TABLE public.policies DROP CONSTRAINT policies_pkey;
   END IF;
END;
$$;
ALTER TABLE ONLY public.policies ADD CONSTRAINT policies_pkey PRIMARY KEY ("policyNumber");

-- Grant permissions on tables to Supabase roles
GRANT ALL ON TABLE public.users TO authenticated;
GRANT ALL ON TABLE public.users TO service_role;
GRANT ALL ON TABLE public.policies TO authenticated;
GRANT ALL ON TABLE public.policies TO service_role;

-- Grant usage on sequences to Supabase roles
GRANT USAGE, SELECT ON SEQUENCE public.users_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.users_id_seq TO service_role;


-- ROW LEVEL SECURITY (RLS) POLICIES
-- Enable RLS for the tables
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.policies ENABLE ROW LEVEL SECURITY;

-- Drop existing policies before creating new ones
DROP POLICY IF EXISTS "Allow authenticated users to manage their own user record" ON public.users;
DROP POLICY IF EXISTS "Allow authenticated users to view all users" ON public.users;
DROP POLICY IF EXISTS "Allow authenticated users to manage all policies" ON public.policies;
DROP POLICY IF EXISTS "Allow public read access to specific policies" ON public.policies;

-- Create RLS policies
CREATE POLICY "Allow authenticated users to manage their own user record"
ON public.users FOR ALL
TO authenticated
USING (auth.email() = email);

CREATE POLICY "Allow authenticated users to view all users"
ON public.users FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "Allow authenticated users to manage all policies"
ON public.policies FOR ALL
TO authenticated
USING (true);

CREATE POLICY "Allow public read access to specific policies"
ON public.policies FOR SELECT
TO anon, authenticated
USING (true);


-- STORAGE SETUP
-- Create the 'receipts' bucket if it doesn't exist
INSERT INTO storage.buckets (id, name, public)
VALUES ('receipts', 'receipts', true)
ON CONFLICT (id) DO NOTHING;

-- Drop existing storage policies before creating new ones
DROP POLICY IF EXISTS "Allow authenticated users to upload receipts" ON storage.objects;
DROP POLICY IF EXISTS "Allow public read access to receipts" ON storage.objects;

-- Create storage policies
CREATE POLICY "Allow authenticated users to upload receipts"
ON storage.objects FOR INSERT
TO authenticated
WITH CHECK (bucket_id = 'receipts');

CREATE POLICY "Allow public read access to receipts"
ON storage.objects FOR SELECT
TO anon, authenticated
USING (bucket_id = 'receipts');
