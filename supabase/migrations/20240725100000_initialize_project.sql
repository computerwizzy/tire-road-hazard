-- Create the users table to manage admin access
CREATE TABLE IF NOT EXISTS public.users (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    email text NOT NULL,
    role text NOT NULL DEFAULT 'member'::text,
    created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
    CONSTRAINT users_pkey PRIMARY KEY (id),
    CONSTRAINT users_email_key UNIQUE (email)
);

-- Create the policies table to store warranty information
CREATE TABLE IF NOT EXISTS public.policies (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "policyNumber" text NOT NULL,
    "invoiceNumber" text,
    "customerName" text,
    "customerEmail" text,
    "customerPhone" text,
    "customerStreet" text,
    "customerCity" text,
    "customerState" text,
    "customerZip" text,
    "vehicleYear" real,
    "vehicleMake" text,
    "vehicleModel" text,
    "vehicleSubmodel" text,
    "vehicleMileage" real,
    "isCommercial" boolean DEFAULT false,
    "tireBrand" text,
    "tireModel" text,
    "tireSize" text,
    "tireQuantity" real,
    "pricePerTire" real,
    "roadHazardPrice" real,
    "tireDot" text,
    "tireDot1" text,
    "tireDot2" text,
    "tireDot3" text,
    "tireDot4" text,
    "tireDot5" text,
    "tireDot6" text,
    "purchaseDate" timestamp with time zone,
    "dealerName" text,
    "warrantyEndDate" date,
    "receiptUrl" text,
    "policyDocument" text,
    CONSTRAINT policies_pkey PRIMARY KEY (id),
    CONSTRAINT policies_policyNumber_key UNIQUE ("policyNumber")
);


-- Create the storage bucket for receipts
INSERT INTO storage.buckets (id, name, public)
VALUES ('receipts', 'receipts', true)
ON CONFLICT (id) DO NOTHING;

-- Set up Row Level Security (RLS)
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.policies ENABLE ROW LEVEL SECURITY;

-- Allow public read access to all files in the receipts bucket
CREATE POLICY "Allow public read access to receipts" ON storage.objects
FOR SELECT USING (bucket_id = 'receipts');

-- Allow authenticated users to upload, update, and delete their own receipts
CREATE POLICY "Allow authenticated users to manage receipts" ON storage.objects
FOR INSERT WITH CHECK (bucket_id = 'receipts' AND auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated users to update receipts" ON storage.objects
FOR UPDATE USING (bucket_id = 'receipts' AND auth.role() = 'authenticated');

CREATE POLICY "Allow authenticated users to delete receipts" ON storage.objects
FOR DELETE USING (bucket_id = 'receipts' AND auth.role() = 'authenticated');

-- Policies for the 'users' table
CREATE POLICY "Allow admin to manage users" ON public.users
FOR ALL USING (
    auth.uid() IS NOT NULL AND (
        (SELECT role FROM public.users WHERE email = (SELECT email FROM auth.users WHERE id = auth.uid())) = 'admin'
    )
)
WITH CHECK (
    auth.uid() IS NOT NULL AND (
        (SELECT role FROM public.users WHERE email = (SELECT email FROM auth.users WHERE id = auth.uid())) = 'admin'
    )
);

CREATE POLICY "Allow user to view their own data" ON public.users
FOR SELECT USING (
    auth.uid() IS NOT NULL AND email = (SELECT email FROM auth.users WHERE id = auth.uid())
);

-- Policies for the 'policies' table
CREATE POLICY "Allow authenticated users to manage all policies" ON public.policies
FOR ALL USING (auth.role() = 'authenticated')
WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Allow public read access for search" ON public.policies
FOR SELECT USING (true);
