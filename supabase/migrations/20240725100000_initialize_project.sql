
-- Create the 'policies' table to store warranty information
CREATE TABLE IF NOT EXISTS public.policies (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    "policyNumber" text NOT NULL,
    "customerName" text NOT NULL,
    "customerEmail" text NOT NULL,
    "customerPhone" text,
    "customerStreet" text,
    "customerCity" text,
    "customerState" text,
    "customerZip" text,
    "vehicleYear" real,
    "vehicleMake" text,
    "vehicleModel" text,
    "vehicleSubmodel" text,
    "vehicleMileage" real,
    "isCommercial" boolean,
    "tireBrand" text,
    "tireModel" text,
    "tireSize" text,
    "tireQuantity" real,
    "pricePerTire" real,
    "roadHazardPrice" real,
    "tireDot1" text,
    "tireDot2" text,
    "tireDot3" text,
    "tireDot4" text,
    "tireDot5" text,
    "tireDot6" text,
    "purchaseDate" date,
    "dealerName" text,
    "invoiceNumber" text,
    "warrantyEndDate" date,
    "receiptUrl" text,
    "policyDocument" text,
    "tireDot" text
);

ALTER TABLE public.policies ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.policies_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY public.policies
    ADD CONSTRAINT policies_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.policies
    ADD CONSTRAINT "policies_policyNumber_key" UNIQUE ("policyNumber");

-- Create the 'users' table for admin panel access
CREATE TABLE IF NOT EXISTS public.users (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    email text NOT NULL,
    role public.user_role DEFAULT 'member'::public.user_role NOT NULL
);

ALTER TABLE public.users ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_email_key UNIQUE (email);

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);

-- Enable Row Level Security (RLS) for the tables
ALTER TABLE public.policies ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for 'policies' table
CREATE POLICY "Allow authenticated users to read all policies" ON public.policies FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow authenticated users to insert policies" ON public.policies FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Allow authenticated users to update policies" ON public.policies FOR UPDATE TO authenticated USING (true) WITH CHECK (true);

-- Create RLS policies for 'users' table
CREATE POLICY "Allow authenticated users to read users" ON public.users FOR SELECT TO authenticated USING (true);
CREATE POLICY "Allow authenticated users to insert users" ON public.users FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Allow authenticated users to delete users" ON public.users FOR DELETE TO authenticated USING (true);

-- Insert the 'receipts' bucket into storage if it doesn't exist
INSERT INTO storage.buckets (id, name, public)
SELECT 'receipts', 'receipts', true
WHERE NOT EXISTS (
    SELECT 1 FROM storage.buckets WHERE id = 'receipts'
);

-- THIS IS THE CRITICAL FIX: Create storage policies for the 'receipts' bucket
-- Policy to allow authenticated users to view/select receipts
CREATE POLICY "Allow authenticated select on receipts" ON storage.objects FOR SELECT TO authenticated USING (bucket_id = 'receipts');

-- Policy to allow authenticated users to upload/insert receipts
CREATE POLICY "Allow authenticated insert on receipts" ON storage.objects FOR INSERT TO authenticated WITH CHECK (bucket_id = 'receipts');

-- Policy to allow authenticated users to update existing receipts
CREATE POLICY "Allow authenticated update on receipts" ON storage.objects FOR UPDATE TO authenticated USING (bucket_id = 'receipts');

-- Policy to allow authenticated users to delete receipts
CREATE POLICY "Allow authenticated delete on receipts" ON storage.objects FOR DELETE TO authenticated USING (bucket_id = 'receipts');
